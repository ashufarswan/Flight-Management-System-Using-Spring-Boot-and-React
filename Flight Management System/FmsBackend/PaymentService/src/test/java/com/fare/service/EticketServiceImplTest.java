package com.fare.service;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.fare.exception.InvalidIdException;
import com.fare.model.ApiResponse;
import com.fare.model.Booking;
import com.fare.model.ETicket;
import com.fare.model.Flight;
import com.fare.model.Passenger;
import com.fare.model.PaymentReceipt;
import com.fare.repository.EticketRepository;
import com.fare.repository.PaymentReceiptRepository;

public class EticketServiceImplTest {

    @Mock
    private EticketRepository fareRepository;

    @Mock
    private BookingClient bookingClient;

    @Mock
    private PaymentReceiptRepository paymentReceiptRepository;

    @InjectMocks
    private EticketServiceImpl eticketService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    

    @Test
    public void testCreateEticket_InvalidBookingId_ThrowsInvalidIdException() throws Exception {
        int invalidBookingId = -1;
        ResponseEntity<ApiResponse<Booking>> bookingResponse = ResponseEntity.notFound().build();
        when(bookingClient.getBookingById(invalidBookingId)).thenReturn(bookingResponse);

        assertThrows(InvalidIdException.class, () -> {
            eticketService.createEticket(invalidBookingId);
        });
    }

    @Test
    public void testCreateEticket_PaymentNotCompleted_ThrowsException() {
        int bookingId = 1;
        ResponseEntity<ApiResponse<Booking>> bookingResponse = ResponseEntity.ok(new ApiResponse<>("Done", "success", createMockBooking()));
        when(bookingClient.getBookingById(bookingId)).thenReturn(bookingResponse);
        PaymentReceipt paymentReceipt = createMockPaymentReceipt();
        paymentReceipt.setPaymentStaus("pending"); // simulate pending payment
       // when(paymentReceiptRepository.findByBookingId(bookingId)).thenReturn(Optional.of(paymentReceipt));

        assertThrows(Exception.class, () -> {
            eticketService.createEticket(bookingId);
        });
    }

    @Test
    public void testGetEticket_ValidTicketId_ReturnsETicket() throws InvalidIdException {
        String ticketId = "valid_ticket_id";
        ETicket eTicket = createMockETicket(ticketId);
        when(fareRepository.findById(ticketId)).thenReturn(Optional.of(eTicket));

        ETicket result = eticketService.getEticket(ticketId);

        assertNotNull(result);
        assertEquals(ticketId, result.getTicketId());
    }

    @Test
    public void testGetEticket_InvalidTicketId_ThrowsInvalidIdException() {
        String invalidTicketId = "invalid_ticket_id";
        when(fareRepository.findById(invalidTicketId)).thenReturn(Optional.empty());

        assertThrows(InvalidIdException.class, () -> {
            eticketService.getEticket(invalidTicketId);
        });
    }

    @Test
    public void testGetEticketsByBookingId_ValidBookingId_ReturnsETicketList() throws InvalidIdException {
        int bookingId = 1;
        List<ETicket> eTicketList = createMockETicketList(bookingId);
        when(fareRepository.findAllByBookingID(bookingId)).thenReturn(eTicketList);

        List<ETicket> result = eticketService.getEticketsByBookingId(bookingId);

        assertNotNull(result);
        assertEquals(eTicketList.size(), result.size());
        assertEquals(bookingId, result.get(0).getBookingID()); // Assuming all tickets have the same booking ID
    }

    @Test
    public void testGetEticketsByBookingId_InvalidBookingId_ThrowsInvalidIdException() {
        int invalidBookingId = -1;
        when(fareRepository.findAllByBookingID(invalidBookingId)).thenReturn(new ArrayList<>());

        assertThrows(InvalidIdException.class, () -> {
            eticketService.getEticketsByBookingId(invalidBookingId);
        });
    }

    @Test
    public void testGenrateUniqueRandomId_ReturnsUniqueID() {
        // Mocking fareRepository to return empty Optional (no existing ticket with generated ID)
        when(fareRepository.findById(anyString())).thenReturn(Optional.empty());

        // Invoke method under test
        String uniqueId = eticketService.genrateUniqueRandomId();

        // Assertions
        assertNotNull(uniqueId);
        assertTrue(uniqueId.matches("\\d+")); // Ensure it's a numeric ID (as generated by Random)
    }

    // Helper methods to create mock objects

    private Booking createMockBooking() {
        Booking booking = new Booking();
        booking.setBookingId(1);
        Flight flight = new Flight();
        flight.setFlightId(101);
        flight.setAirline("Mock Airlines");
        flight.setDeparture("Mock Departure");
        flight.setDepartureDateAndTime(null);
        flight.setDestination("Mock Destination");
        booking.setFlight(flight);
        List<Passenger> passengers = new ArrayList<>();
        passengers.add(new Passenger());
        passengers.add(new Passenger());
        booking.setPassengerList(passengers);
        return booking;
    }

    private PaymentReceipt createMockPaymentReceipt() {
        PaymentReceipt paymentReceipt = new PaymentReceipt();
        paymentReceipt.setBookingId(1);
        paymentReceipt.setPaymentStaus("paid");
        return paymentReceipt;
    }

    private ETicket createMockETicket(String ticketId) {
        ETicket eTicket = new ETicket();
        eTicket.setTicketId(ticketId);
        eTicket.setBookingID(1);
        eTicket.setPassangerName("John Doe");
        eTicket.setFlighID(101);
        eTicket.setAirline("Mock Airlines");
        eTicket.setDeparture("Mock Departure");
        eTicket.setDepDate(null);
        eTicket.setDestination("Mock Destination");
        return eTicket;
    }

    private List<ETicket> createMockETicketList(int bookingId) {
        List<ETicket> eTicketList = new ArrayList<>();
        eTicketList.add(createMockETicket("1"));
        eTicketList.add(createMockETicket("2"));
        return eTicketList;
    }
}